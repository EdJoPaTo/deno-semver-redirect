name: Test and Build Rust

on:
  push:
  pull_request:
  schedule:
    # Check if it works with current dependencies
    - cron: '42 2 * * 6' # weekly on Saturday 2:42 UTC

env:
  RUSTFLAGS: --deny warnings

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - uses: actions/checkout@v4
      - run: cargo fmt --check --verbose

  test:
    name: Test ${{ matrix.toolchain }} ${{ matrix.os }} ${{ matrix.features }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ (matrix.toolchain == 'beta') || (matrix.toolchain == 'nightly') }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
        os:
          - ubuntu-latest
          - macos-latest
        clippyargs:
          - -D clippy::pedantic
        features:
          - "" # default features
        include:
          # Check future versions and maybe get some glances on soon to be lints
          - toolchain: beta
            os: ubuntu-latest
            features: --all-features
            clippyargs: -D clippy::pedantic -D clippy::nursery
          - toolchain: nightly
            os: ubuntu-latest
            features: --all-features
            clippyargs: -D clippy::pedantic
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - uses: actions/checkout@v4

      - name: Fetch dependencies
        run: cargo fetch --verbose --locked

      - name: Check clippy
        run: cargo clippy --verbose --locked --all-targets ${{ matrix.features }} -- ${{ matrix.clippyargs }}

      - name: Check docs
        run: cargo doc --verbose --locked --no-deps ${{ matrix.features }}

      - name: Run tests
        run: cargo test --verbose --locked ${{ matrix.features }}

  github-release:
    name: Release ${{ matrix.triple }}
    runs-on: ${{ matrix.os }}
    needs: test
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - triple: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - triple: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.triple }}

      - name: Install cargo tools
        if: runner.os == 'Linux'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set artifact name
        shell: bash
        run: |
          version="$(git describe --tags --match "v*.*.*" --always)"
          echo "version: $version"
          echo "GIT_TAG_VERSION=$version" >> $GITHUB_ENV

          name="deno-semver-redirect-$version-${{ matrix.triple }}"
          echo "artifact: $name"
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

      - name: Fetch dependencies
        run: cargo fetch --verbose --locked

      - name: Build
        run: ${{ runner.os == 'Linux' && 'cross' || 'cargo' }} build --release --verbose --locked --target ${{ matrix.triple }}

      - name: Package tar.gz (*nix)
        if: runner.os != 'Windows'
        run: >
          tar -cv
          LICENSE README.md
          -C target/${{ matrix.triple }}/release/ deno-semver-redirect
          | gzip --best > ${{ env.ARTIFACT_NAME }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.triple }}
          path: |
            *.deb
            *.rpm
            *.tar.gz
            *.zip

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.deb
            *.rpm
            *.tar.gz
            *.zip
