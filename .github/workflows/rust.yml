name: Test and Build Rust

on:
  push:
  pull_request:

jobs:
  test:
    name: Test ${{ matrix.os }} ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Check stable on the main platforms and ensure there is not even a single warning
          - os: ubuntu-latest
            toolchain: stable
            clippyargs: -D clippy::pedantic -D warnings
          - os: macOS-latest
            toolchain: stable
            clippyargs: -D clippy::pedantic -D warnings
          - os: windows-latest
            toolchain: stable
            clippyargs: -D clippy::pedantic -D warnings

          # Check future versions and maybe get some glances on soon to be lints
          - os: ubuntu-latest
            toolchain: beta
            clippyargs: -W clippy::pedantic
          - os: ubuntu-latest
            toolchain: nightly
            clippyargs: -W clippy::pedantic
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          override: true
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - uses: actions/checkout@v2

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --verbose --locked --all-targets --all-features -- ${{ matrix.clippyargs }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --locked --all-features

  github-release:
    name: Release ${{ matrix.triple }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            triple: arm-unknown-linux-gnueabihf
          - os: ubuntu-latest
            triple: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            triple: aarch64-unknown-linux-gnu

          - os: macOS-latest
            triple: x86_64-apple-darwin
          - os: macOS-latest
            triple: aarch64-apple-darwin

          - os: windows-latest
            triple: x86_64-pc-windows-msvc
          # https://github.com/briansmith/ring/issues/1167
          # - os: windows-latest
          #   triple: aarch64-pc-windows-msvc
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          target: ${{ matrix.triple }}
          toolchain: stable

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Artifact Name
        shell: bash
        run: |
          version=$(git describe --tags --match "v*.*.*" --always)
          echo "version is: $version"
          echo "GIT_TAG_VERSION=$version" >> $GITHUB_ENV

          name="deno-semver-redirect-$version-${{ matrix.triple }}"
          echo "artifact name is: $name"
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

      - name: Build
        uses: actions-rs/cargo@v1
        env:
          # TODO: Remove this once it's the default
          SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk
        with:
          command: build
          args: --release --verbose --locked --all-features --target ${{ matrix.triple }}
          use-cross: ${{ runner.os == 'Linux' && matrix.triple != 'x86_64-unknown-linux-gnu' }}

      - name: Package (-nix)
        if: runner.os != 'Windows'
        run: >
          tar --gzip -cvf ${{ env.ARTIFACT_NAME }}.tar.gz
          LICENSE README.md
          -C target/${{ matrix.triple }}/release deno-semver-redirect
      - name: Package (windows)
        if: runner.os == 'Windows'
        run: |
          7z a ${{ env.ARTIFACT_NAME }}.zip LICENSE README.md
          cd target/${{ matrix.triple }}/release
          7z a ../../../${{ env.ARTIFACT_NAME }}.zip deno-semver-redirect.exe
          cd -

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.triple }}
          path: |
            *.zip
            *.tar.gz

      - name: GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz
